{"version":3,"sources":["Card.js","CardList.js","Form.js","App.js","serviceWorker.js","index.js"],"names":["Card","profile","this","props","className","src","avatar_url","alt","name","company","React","Component","CardList","profiles","map","key","id","Form","state","userName","handleSubmit","event","a","preventDefault","axios","get","resp","onSubmit","data","setState","alert","type","value","onChange","target","placeholder","required","App","addNewProfile","profileData","prevState","title","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4QA+CeA,G,4KAnBX,IAAMC,EAAUC,KAAKC,MACrB,OACE,yBAAKC,UAAU,kBACb,yBAAKC,IAAKJ,EAAQK,WAAYC,IAAI,KAClC,yBAAKH,UAAU,QACb,yBAAKA,UAAU,QAAQH,EAAQO,MAC/B,yBAAKJ,UAAU,WAAWH,EAAQQ,e,GAZzBC,IAAMC,YCNVC,MAXf,SAAkBT,GAChB,OAEE,oCACGA,EAAMU,SAASC,KAAI,SAACb,GAAD,OAClB,kBAAC,EAAD,eAAMc,IAAKd,EAAQe,IAAQf,S,yCC6BpBgB,E,4MAlCbC,MAAQ,CAAEC,SAAU,I,EACpBC,a,uCAAe,WAAOC,GAAP,eAAAC,EAAA,sEAEXD,EAAME,iBAFK,SAGQC,IAAMC,IAAN,uCACe,EAAKP,MAAMC,WAJlC,OAGLO,EAHK,OAMX,EAAKvB,MAAMwB,SAASD,EAAKE,MACzB,EAAKC,SAAS,CAAEV,SAAU,KAPf,gDASXW,MAAM,kCACN,EAAKD,SAAS,CAAEV,SAAU,KAVf,yD,6GAaL,IAAD,OACP,OACE,oCACE,0BAAMQ,SAAUzB,KAAKkB,cACnB,2BACEW,KAAK,OACLC,MAAO9B,KAAKgB,MAAMC,SAClBc,SAAU,SAACZ,GAAD,OACR,EAAKQ,SAAS,CAAEV,SAAUE,EAAMa,OAAOF,SAEzCG,YAAY,kBACZC,UAAQ,IAEV,kD,GA5BS1B,IAAMC,WCmBV0B,E,4MAjBbnB,MAAQ,CAAEL,SAAU,I,EACpByB,cAAgB,SAACC,GACf,EAAKV,UAAS,SAACW,GAAD,MAAgB,CAC5B3B,SAAS,GAAD,mBAAM2B,EAAU3B,UAAhB,CAA0B0B,S,uDAIpC,OACE,6BACE,yBAAKnC,UAAU,UAAUF,KAAKC,MAAMsC,OACpC,kBAAC,EAAD,CAAMd,SAAUzB,KAAKoC,gBACrB,kBAAC,EAAD,CAAUzB,SAAUX,KAAKgB,MAAML,gB,GAZrBH,IAAMC,WCOJ+B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,CAAKR,MAAM,0BAEbS,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.b870d764.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\n\nconst testData = [\n  {\n    name: \"Givemore\",\n    avatar_url: \"https://avatars0.githubusercontent.com/u/59787301?v=4\",\n    company: \"Twitter\",\n  },\n  {\n    name: \"Lisa Seelye\",\n    avatar_url: \"https://avatars2.githubusercontent.com/u/18159?v=4\",\n    company: \"Red Hat\",\n  },\n  {\n    name: \"Tylor Sherman\",\n    avatar_url: \"https://avatars1.githubusercontent.com/u/104885?v=4\",\n    company: \"Denim & Steel\",\n  },\n];\n\n/*We can write Components either as class Components or as function Components. The one below is a class Component. I'll be mixing the two throughout this project to get a feel of all the types*/\nclass Card extends React.Component {\n  /* handleDelete = (e) => {\n    const cardToDelete = this.props;\n    cardToDelete.remove();\n  }; */\n  render() {\n    const profile = this.props;\n    return (\n      <div className=\"github-profile\">\n        <img src={profile.avatar_url} alt=\"\" />\n        <div className=\"info\">\n          <div className=\"name\">{profile.name}</div>\n          <div className=\"company\">{profile.company}</div>\n        </div>\n\n        {/*Delete button to be added\n         <button className=\"delBtn\" onClick={this.handleDelete}>\n          X\n        </button> */}\n      </div>\n    );\n  }\n}\n\nexport { testData };\nexport default Card;\n","import React from \"react\";\nimport \"./App.css\";\nimport Card from \"./Card.js\";\n\n/* This is a function Component */\nfunction CardList(props) {\n  return (\n    /* We can use divs or the empty angle brackets below to enclose more than one JSX into a Component because Components can only return one element */\n    <>\n      {props.profiles.map((profile) => (\n        <Card key={profile.id} {...profile} />\n      ))}\n    </>\n  );\n}\n\nexport default CardList;\n","import React from \"react\";\nimport \"./App.css\";\nimport axios from \"axios\";\n\nclass Form extends React.Component {\n  state = { userName: \"\" }; //Used this instead of ref\n  handleSubmit = async (event) => {\n    try {\n      event.preventDefault();\n      const resp = await axios.get(\n        `https://api.github.com/users/${this.state.userName}`\n      );\n      this.props.onSubmit(resp.data);\n      this.setState({ userName: \"\" });\n    } catch (err) {\n      alert(\"The user name is not available\");\n      this.setState({ userName: \"\" });\n    }\n  };\n  render() {\n    return (\n      <>\n        <form onSubmit={this.handleSubmit}>\n          <input\n            type=\"text\"\n            value={this.state.userName} //Used this instead of ref\n            onChange={(event) =>\n              this.setState({ userName: event.target.value })\n            } //Used this instead of ref\n            placeholder=\"GitHub username\"\n            required\n          ></input>\n          <button>Add Card</button>\n        </form>\n      </>\n    );\n  }\n}\n\nexport default Form;\n","import React from \"react\";\nimport \"./App.css\";\nimport CardList from \"./CardList.js\";\nimport Form from \"./Form.js\";\n\nclass App extends React.Component {\n  state = { profiles: [] };\n  addNewProfile = (profileData) => {\n    this.setState((prevState) => ({\n      profiles: [...prevState.profiles, profileData],\n    }));\n  };\n  render() {\n    return (\n      <div>\n        <div className=\"header\">{this.props.title}</div>\n        <Form onSubmit={this.addNewProfile} />\n        <CardList profiles={this.state.profiles} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n/* Add Error Handling Errors */\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App title=\"The GitHub Cards App\" />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}